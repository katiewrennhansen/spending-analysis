[{"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx":"1","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx":"2","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx":"3","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx":"4","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx":"5","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx":"6","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx":"7","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx":"8","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx":"9","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx":"10","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx":"11"},{"size":2772,"mtime":1611109993000,"results":"12","hashOfConfig":"13"},{"size":769,"mtime":1611110016000,"results":"14","hashOfConfig":"13"},{"size":1282,"mtime":1611023749000,"results":"15","hashOfConfig":"13"},{"size":394,"mtime":1610419199000,"results":"16","hashOfConfig":"13"},{"size":841,"mtime":1611110830000,"results":"17","hashOfConfig":"13"},{"size":3752,"mtime":1611110310000,"results":"18","hashOfConfig":"13"},{"size":3277,"mtime":1611104870000,"results":"19","hashOfConfig":"13"},{"size":500,"mtime":1610995755000,"results":"20","hashOfConfig":"13"},{"size":1388,"mtime":1611018449000,"results":"21","hashOfConfig":"13"},{"size":1021,"mtime":1611024048000,"results":"22","hashOfConfig":"13"},{"size":2144,"mtime":1611109778000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19h4lb7",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx",["48"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx",["49","50","51","52"],"//build category breakdown\nexport const buildBreakdown: BuildBreakdown = (transactions: Transaction[]) => {\n    let categories: string[] = [];\n    let breakdown: Breakdown = {};\n\n    //build array of categories\n    transactions.map(transaction => (!categories.includes(transaction['Category'])) ? categories.push(transaction['Category']) : null)\n\n    //break out spending into cateogries\n    categories.forEach(category => {\n        breakdown[category] = 0;\n        transactions\n            .filter(transaction => transaction['Category'] === category)\n            .map(transaction => {\n                if(transaction['Transaction Type'] === 'credit') breakdown[category] += Number(transaction['Amount'])\n                else breakdown[category] -= Number(transaction['Amount'])\n            })\n        \n        let totalValue = Number(breakdown[category].toFixed(2))\n        if(totalValue < 0) breakdown[category] = totalValue;\n        else delete breakdown[category]\n    })\n\n    return breakdown;\n  } \n\n//caculate total credit/debit on account per month\nexport const calculateTotals: CalculateTotals = (transactions: Transaction[], type: 'credit' | 'debit')  => {\n    let totalSpent: number = 0;\n    transactions.map(transaction => {\n        if(transaction['Transaction Type'] === type){\n            totalSpent += Number(transaction['Amount'])\n        }\n    })\n    return Number(totalSpent.toFixed(2));\n}\n\n//exclude select categories from transactions array\nexport const excludeCategories: ExcludeValues = (transactions: Transaction[], exclude: string[]) => {\n    let filtered = transactions.filter(transaction => {\n        if(!exclude.includes(transaction['Category'])){\n            return transaction;\n        }\n    })\n    return filtered;\n}\n\n//exclude select fields from transactions array\nexport const cleanData: CleanData = (transactions: Transaction[]) => {\n    let filtered = transactions.map(transaction => {\n        return {\n            'Date': transaction['Date'],\n            'Account Name': transaction['Account Name'],\n            'Description': transaction['Description'],\n            'Amount': transaction['Amount'],\n            'Transaction Type': transaction['Transaction Type'],\n            'Category': transaction['Category'],\n        }\n    })\n    return filtered;\n}\n\n//build array containing sorted transactions dates\nexport const buildDateRange: BuildDateRange = (data: Transaction[]) => {\n    //create array containing all transaction dates\n    let dates: any[] = [];\n    data.map(d => dates.push(new Date(d['Date'])))\n    dates.sort((a, b) => a - b);\n\n    //clean up date formatting in MM/DD/YYYY format\n    let cleanedDates: string[] = [];\n    dates.map(date => {\n      //handle year\n      let year = date.getFullYear();\n\n      //handle month\n      let month = (1 + date.getMonth()).toString();\n      month = month.length > 1 ? month : '0' + month;\n\n      //handle day\n      let day = date.getDate().toString();\n      day = day.length > 1 ? day : '0' + day;\n      \n      //push formatted date into new array\n      cleanedDates.push(`${month}/${day}/${year}`);\n    })\n\n    return cleanedDates;\n}\n\n\n\nexport const buildSummary: BuildSummary = (noTransfers: Transaction[]) => {\n    let summary: Summary = {};\n\n    //calculare total income\n    let totalIncome = calculateTotals(noTransfers, 'credit');\n    summary['totalIncome'] = totalIncome;\n\n    //calculate total amount speant\n    let totalSpent = calculateTotals(noTransfers, 'debit');\n    summary['totalSpent'] = totalSpent;\n\n    //calculare percent saved\n    summary['percentSaved'] = Math.round(((summary.totalIncome - summary.totalSpent) / summary.totalIncome) * 100);\n\n    //calculate total saved\n    summary['totalSaved'] = totalIncome - totalSpent;\n\n    return summary;\n}","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx",["53","54"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx",["55","56"],"import React from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload } from '@fortawesome/free-solid-svg-icons';\n\n\ninterface Props {\n    onFileLoad: OnFileLoad;\n    transactions: Transaction[];\n    dates: string[];\n    summary: Summary;\n    file: string;\n}\n\nexport const Home: React.FC<Props> = ({ onFileLoad, transactions, dates, summary, file }) => {\n    return (\n        <div className=\"home\">\n            <h2>Welcome!</h2>\n            { !transactions?.length ? <p>Please select a CSV file to upload.</p> : null}\n\n            <div className=\"csv-upload\">\n                <CSVReader\n                    parserOptions={{ header: true }}\n                    onFileLoaded={(data, fileInfo) => onFileLoad(data, fileInfo)}\n                />\n\n                <p>{ file ? `Currently reading: ${file}` : 'No file selected' }</p>\n            </div>\n\n            { transactions?.length \n                ? <div className=\"home-summary\">\n                    <h2>{dates?.length ? `${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n                    <div className=\"spending-summary\">\n                        <div className=\"card\">\n                            <h3>Total Income +</h3>\n                            <p className=\"green\">${summary.totalIncome}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Total Spent -</h3>\n                            <p className=\"red\">${summary.totalSpent}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Total Saved</h3>\n                            <p className=\"green\">${summary.totalSaved}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Percent Saved</h3>\n                            <p className={(summary.percentSaved > 40) ? 'green' : 'red'}>{summary.percentSaved}%</p>\n                        </div>\n                    </div>\n                </div>\n                : null\n            }\n           \n        </div>\n    )\n}",{"ruleId":"57","severity":1,"message":"58","line":9,"column":3,"nodeType":"59","messageId":"60","endLine":9,"endColumn":18},{"ruleId":"61","severity":1,"message":"62","line":14,"column":30,"nodeType":"63","messageId":"64","endLine":14,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":30,"column":34,"nodeType":"63","messageId":"64","endLine":30,"endColumn":36},{"ruleId":"61","severity":1,"message":"65","line":40,"column":52,"nodeType":"63","messageId":"66","endLine":40,"endColumn":54},{"ruleId":"61","severity":1,"message":"62","line":72,"column":20,"nodeType":"63","messageId":"64","endLine":72,"endColumn":22},{"ruleId":"61","severity":1,"message":"62","line":11,"column":36,"nodeType":"63","messageId":"64","endLine":11,"endColumn":38},{"ruleId":"67","severity":1,"message":"68","line":82,"column":8,"nodeType":"69","endLine":82,"endColumn":19,"suggestions":"70"},{"ruleId":"57","severity":1,"message":"71","line":3,"column":10,"nodeType":"59","messageId":"60","endLine":3,"endColumn":25},{"ruleId":"57","severity":1,"message":"72","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":22},"@typescript-eslint/no-unused-vars","'calculateTotals' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cleanedBreakdown'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'FontAwesomeIcon' is defined but never used.","'faFileUpload' is defined but never used.",{"desc":"74","fix":"75"},"Update the dependencies array to be: [breakdown, cleanedBreakdown]",{"range":"76","text":"77"},[2965,2976],"[breakdown, cleanedBreakdown]"]