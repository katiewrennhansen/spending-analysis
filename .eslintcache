[{"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx":"1","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx":"2","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx":"3","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx":"4","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx":"5","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx":"6","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx":"7","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx":"8","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx":"9","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx":"10","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx":"11","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Monthly.tsx":"12"},{"size":2999,"mtime":1611358359000,"results":"13","hashOfConfig":"14"},{"size":771,"mtime":1611357293000,"results":"15","hashOfConfig":"14"},{"size":1282,"mtime":1611023749000,"results":"16","hashOfConfig":"14"},{"size":394,"mtime":1611366984000,"results":"17","hashOfConfig":"14"},{"size":801,"mtime":1611193629000,"results":"18","hashOfConfig":"14"},{"size":4183,"mtime":1611367468000,"results":"19","hashOfConfig":"14"},{"size":2954,"mtime":1611366057000,"results":"20","hashOfConfig":"14"},{"size":500,"mtime":1610995755000,"results":"21","hashOfConfig":"14"},{"size":1388,"mtime":1611018449000,"results":"22","hashOfConfig":"14"},{"size":1257,"mtime":1611193951000,"results":"23","hashOfConfig":"14"},{"size":2053,"mtime":1611357971000,"results":"24","hashOfConfig":"14"},{"size":5672,"mtime":1611358417000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19h4lb7",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx",["51","52","53","54"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx",["55","56"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Monthly.tsx",["57"],"import React, { useState, useEffect } from 'react';\nimport * as _d3 from 'd3';\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n    breakdown: Breakdown;\n}\n\nexport const Monthly: React.FC<Props> = ({ transactions, dates, breakdown }) => {\n    const categories = Object.keys(breakdown);\n    const [activeCat, setActiveCat] = useState(categories[0]);\n\n    //build object for groceries over time\n    const breakdownMonth = (transactions: Transaction[], category: any): any[] => {\n        setActiveCat(category);\n\n        //create new object \n        let summary: Summary = {};\n        let graphData: any[] = [];\n        //loop through transactions\n        transactions.forEach(t => {\n            if(t['Category'] === category){\n                //split dates into MM/YYYY \n                let splitDate = t['Date'].split('/')\n                let condensedDate = `${splitDate[0]}/${splitDate[2]}`;\n                //if no current value, create new value\n                if(!Object.keys(summary).includes(condensedDate)){\n                    summary[condensedDate] = Number(t['Amount'])\n                } else {\n                    //if value, add to values\n                    summary[condensedDate] = Number(summary[condensedDate]) + Number(t['Amount']);\n                }\n            }\n        }) \n\n        //build array for x,y data\n        Object.keys(summary).map(key => {\n            graphData.push({ \n                x: key,\n                y: Number(summary[key].toFixed(2))\n            })\n        })\n\n        //reverse data so it sort oldest to most recent\n        let data = graphData.reverse();\n\n        //return data array\n        return data;\n    }\n\n\n\n    useEffect(() => {\n        if(!transactions){\n            return;\n        } else {\n            const monthlyBreakdown = breakdownMonth(transactions, activeCat);\n\n            const margin = 100;\n            const width = 900 - 2 * margin;\n            const height = 500 - 2 * margin;\n            const svg = _d3.select('svg.monthly-breakdown');\n\n            svg.selectAll('*').remove();\n\n            const chart = svg.append('g')\n                                .attr('transform', `translate(${margin}, ${margin})`);\n            \n            //define yScale parameters\n            const yScale = _d3.scaleLinear()\n                            .range([height, 0])\n                            .domain([0, _d3.max(monthlyBreakdown, (b) => b.y)]);\n\n            //append y axis\n            chart.append('g')\n                .call(_d3.axisLeft(yScale));\n            \n            //define xScale parameters\n            const xScale = _d3.scaleBand()\n                                .rangeRound([0, width])\n                                .domain(monthlyBreakdown.map(d => d.x))\n                                .padding(0.2)\n                                .align(0.5)\n                                .round(true)\n\n            //add scale amount to cleaned breakdown object\n            monthlyBreakdown.forEach(b => {\n                b.scale = xScale(b.x)\n            })\n            \n            //append x axis\n            chart.append('g')\n                .attr('transform', `translate(0, ${height})`)\n                .call(_d3.axisBottom(xScale))\n                .selectAll(\"text\")\t\n                    .style(\"text-anchor\", \"end\")\n                    .attr(\"dx\", \"-.8em\")\n                    .attr(\"dy\", \".15em\")\n                    .attr(\"transform\", \"rotate(-65)\");\n\n            //create bars\n            const bar = chart.selectAll('group')\n                                .data(monthlyBreakdown)\n                                .enter()\n            \n            //append rect elements for each breakdown item\n            bar.append('rect')\n                .style('fill', '#00d9ad')\n                .style('rx', '5')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y))\n                .attr('height', (s) => height - yScale(s.y))\n                .attr('width', xScale.bandwidth())\n            \n            //append text elements labelling total spent for each breakdown item\n            bar.append('text')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y) - 5)\n                .text((d) => `$${(d.y).toFixed(2)}`)\n                .attr('font-size', '10px')\n        }\n    }, [transactions, activeCat])\n\n    return (\n        <div className=\"monthly-chart\">\n            <h2>Monthly Data{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 2]}` : ''}</h2>\n\n            { transactions?.length\n                ? <div> \n                    <div>\n                        <div className=\"select-container\">\n                            <select onChange={e => {\n                                const target = e.target as HTMLSelectElement;\n                                const cat: any = target.value;\n                                setActiveCat(cat)\n                            }} \n                            value={activeCat}\n                            className=\"monthly-dropdown\">\n                                { categories.map(cat => (\n                                    <option key={cat} value={cat}>{cat}</option>\n                                ))}\n                            </select>\n                            <span className=\"focus\"></span>\n                        </div>\n                        <h3>{activeCat}</h3>\n                    </div>\n                    <svg className='monthly-breakdown' width={900} height={500}></svg>\n                </div>\n                : <p>There is no data available. Please upload a CSV to view monthly spending summary.</p>\n            }\n        </div>\n    )\n}",{"ruleId":"58","severity":1,"message":"59","line":15,"column":30,"nodeType":"60","messageId":"61","endLine":15,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":31,"column":34,"nodeType":"60","messageId":"61","endLine":31,"endColumn":36},{"ruleId":"58","severity":1,"message":"62","line":43,"column":52,"nodeType":"60","messageId":"63","endLine":43,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":78,"column":20,"nodeType":"60","messageId":"61","endLine":78,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":11,"column":36,"nodeType":"60","messageId":"61","endLine":11,"endColumn":38},{"ruleId":"64","severity":1,"message":"65","line":75,"column":8,"nodeType":"66","endLine":75,"endColumn":19,"suggestions":"67"},{"ruleId":"58","severity":1,"message":"59","line":38,"column":38,"nodeType":"60","messageId":"61","endLine":38,"endColumn":40},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cleanedBreakdown'. Either include it or remove the dependency array.","ArrayExpression",["68"],{"desc":"69","fix":"70"},"Update the dependencies array to be: [breakdown, cleanedBreakdown]",{"range":"71","text":"72"},[2642,2653],"[breakdown, cleanedBreakdown]"]