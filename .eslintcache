[{"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx":"1","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx":"2","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx":"3","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx":"4","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx":"5","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx":"6","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx":"7","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx":"8","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx":"9","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx":"10","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx":"11"},{"size":2968,"mtime":1611023726000,"results":"12","hashOfConfig":"13"},{"size":721,"mtime":1611023415000,"results":"14","hashOfConfig":"13"},{"size":1282,"mtime":1611023749000,"results":"15","hashOfConfig":"13"},{"size":394,"mtime":1610419199000,"results":"16","hashOfConfig":"13"},{"size":479,"mtime":1611023642000,"results":"17","hashOfConfig":"13"},{"size":3121,"mtime":1611022008000,"results":"18","hashOfConfig":"13"},{"size":3057,"mtime":1611018494000,"results":"19","hashOfConfig":"13"},{"size":500,"mtime":1610995755000,"results":"20","hashOfConfig":"13"},{"size":1388,"mtime":1611018449000,"results":"21","hashOfConfig":"13"},{"size":1021,"mtime":1611024048000,"results":"22","hashOfConfig":"13"},{"size":1359,"mtime":1611023527000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19h4lb7",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/App.tsx",["47"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Dashboard.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/TransactionsList.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Transaction.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Summary.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/utils/utilities.tsx",["48","49","50","51"],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/BreakdownBarChart.tsx",["52","53"],"import React, { useEffect } from 'react';\nimport * as _d3 from 'd3';\n\ninterface Props {\n    breakdown: Breakdown;\n}\n\nexport const BreakdownBarChart: React.FC<Props> = ({ breakdown }) => {\n    //clean up breakdown data to conform to bar chart\n    let cleanedBreakdown:any[] = [];\n    Object.keys(breakdown).map(key => {\n        cleanedBreakdown.push({\n            x: key,\n            y: Math.abs(breakdown[key])\n        })\n    })\n\n    useEffect(() => {\n        if(!breakdown){\n            return;\n        } else {\n            const margin = 60;\n            const width = 1000 - 2 * margin;\n            const height = 600 - 2 * margin;\n            const svg = _d3.select('svg.spending-breakdown');\n            const chart = svg.append('g')\n                                .attr('transform', `translate(${margin}, ${margin})`);\n            \n            //define yScale parameters\n            const yScale = _d3.scaleLinear()\n                            .range([height, 0])\n                            .domain([0, _d3.max(cleanedBreakdown, (b) => b.y)]);\n\n            //append y axis\n            chart.append('g')\n                .call(_d3.axisLeft(yScale));\n            \n            //define xScale parameters\n            const xScale = _d3.scaleBand()\n                                .rangeRound([0, width])\n                                .domain(cleanedBreakdown.map(d => d.x))\n                                .padding(0.2)\n                                .align(0.5)\n                                .round(true)\n\n            //add scale amount to cleaned breakdown object\n            cleanedBreakdown.forEach(b => {\n                b.scale = xScale(b.x)\n            })\n            \n            //append x axis\n            chart.append('g')\n                .attr('transform', `translate(0, ${height})`)\n                .call(_d3.axisBottom(xScale));\n\n            //create bars\n            const bar = chart.selectAll('group')\n                                .data(cleanedBreakdown)\n                                .enter()\n            \n            //append rect elements for each breakdown item\n            bar.append('rect')\n                .style('fill', '#00d9ad')\n                .style('rx', '5')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y))\n                .attr('height', (s) => height - yScale(s.y))\n                .attr('width', xScale.bandwidth())\n            \n            //append text elements labelling total spent for each breakdown item\n            bar.append('text')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y) - 5)\n                .text((d) => `$${(d.y).toFixed(2)}`)\n                .attr('font-size', '10px')\n                }\n    }, [breakdown])\n   \n    return (\n        <div className='bar-chart'>\n            { cleanedBreakdown?.length\n                ? null\n                : <div>Sorry, no data currently available.</div>\n            }\n            <svg className='spending-breakdown' width={1000} height={600}></svg>\n        </div>\n    );\n  }","/Users/kawrenn/Desktop/spend-analyzer-frontend/src/index.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Header.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Sidebar.tsx",[],"/Users/kawrenn/Desktop/spend-analyzer-frontend/src/components/Home.tsx",[],{"ruleId":"54","severity":1,"message":"55","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"58","severity":1,"message":"59","line":14,"column":30,"nodeType":"60","messageId":"61","endLine":14,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":30,"column":34,"nodeType":"60","messageId":"61","endLine":30,"endColumn":36},{"ruleId":"58","severity":1,"message":"62","line":40,"column":52,"nodeType":"60","messageId":"63","endLine":40,"endColumn":54},{"ruleId":"58","severity":1,"message":"59","line":72,"column":20,"nodeType":"60","messageId":"61","endLine":72,"endColumn":22},{"ruleId":"58","severity":1,"message":"59","line":11,"column":36,"nodeType":"60","messageId":"61","endLine":11,"endColumn":38},{"ruleId":"64","severity":1,"message":"65","line":77,"column":8,"nodeType":"66","endLine":77,"endColumn":19,"suggestions":"67"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cleanedBreakdown'. Either include it or remove the dependency array.","ArrayExpression",["68"],{"desc":"69","fix":"70"},"Update the dependencies array to be: [breakdown, cleanedBreakdown]",{"range":"71","text":"72"},[2744,2755],"[breakdown, cleanedBreakdown]"]