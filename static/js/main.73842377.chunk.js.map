{"version":3,"sources":["utils/utilities.tsx","components/BreakdownBarChart.tsx","components/Summary.tsx","components/Dashboard.tsx","components/Sidebar.tsx","components/Header.tsx","components/Overview.tsx","components/Categories.tsx","components/Home.tsx","components/Transaction.tsx","components/TransactionsList.tsx","components/Monthly.tsx","App.tsx","index.tsx"],"names":["calculateTotals","transactions","type","total","forEach","transaction","Number","toFixed","cleanData","categories","exclude","cat","active","push","name","filtered","Object","keys","length","includes","buildGraph","breakdown","el","addText","margin","svg","_d3","selectAll","remove","chart","append","attr","yScale","range","domain","b","y","call","xScale","rangeRound","map","d","x","padding","align","round","scale","style","bar","data","enter","s","bandwidth","barWidth","line","curve","datum","text","formatNumber","num","formatted","parseFloat","toString","replace","BreakdownBarChart","useEffect","cleanedBreakdown","key","Math","abs","cleanBreakdownData","className","width","height","Summary","summary","sort","a","item","i","totalIncome","Dashboard","dates","Sidebar","exact","to","icon","faHome","faChartBar","faCalendarAlt","faList","Header","data-name","xmlns","viewBox","preserveAspectRatio","fill","opacity","Overview","totalSpent","totalSaved","percentSaved","Categories","toggleCategory","useState","showDropdown","setShowDropdown","activeCat","filter","onClick","faMinus","faPlus","faTimes","Home","onFileLoad","file","error","parserOptions","header","onFileLoaded","fileInfo","Transaction","TransactionsList","page","setPage","perPageStart","setPerPageStart","perPageEnd","setPerPageEnd","totalPages","ceil","pageEnd","prevPage","faChevronLeft","pageStart","nextPage","faChevronRight","Monthly","setActiveCat","monthlyBreakdown","category","graphData","t","splitDate","split","condensedDate","amount","reverse","breakdownMonth","onChange","e","target","value","initialTransactions","emptyArray","App","initial","setInitial","setTransactions","setBreakdown","setSummary","setDates","setFile","setError","setCategories","createSummary","newBreakdown","totalValue","buildBreakdown","dateRange","Date","cleanedDates","date","year","getFullYear","month","getMonth","day","getDate","buildDateRange","newSummary","noTransfers","buildSummary","path","cleanedData","categoryArray","categoryObj","toggledCategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73842377.chunk.js","sourcesContent":["import * as _d3 from 'd3';\n\n/*  \n    ====================\n    AVAILABLE FUNTIONS\n    ====================\n    1. buildBreakdown - build category breakdown\n    2. calculateTotals - caculate total credit/debit on account per month\n    3. buildSummary - build summary object\n    4. cleanData - exclude select fields and categories from transactions array\n    5. buildDateRange - build array containing sorted transactions dates\n    6. cleanBreakdownData - clean up breakdown data to conform to bar chart\n    7. breakdownMonth - build monthly data for selected category over time\n    8. buildGraph - build d3 visualization\n    9. formatNumber - format numbers with commas in the thousands place, and round to 2 decimal pts\n\n*/\n\n//build category breakdown\nexport const buildBreakdown = (transactions: Transaction[]): Breakdown => {\n    let categories: string[] = [];\n    let breakdown: Breakdown = {};\n\n    //build array of categories\n    transactions\n        .map(transaction => (!categories.includes(transaction['Category'])) && categories.push(transaction['Category']))\n\n    //break out spending into cateogries\n    categories.forEach(category => {\n        breakdown[category] = 0;\n        transactions\n            .filter(transaction => transaction['Category'] === category)\n            .forEach(transaction => {\n                (transaction['Transaction Type'] === 'credit') \n                    ? breakdown[category] += Number(transaction['Amount'])\n                    : breakdown[category] -= Number(transaction['Amount'])\n            })\n        \n        //if total value is negative ($$ spend), assign value else ($$ gained), remove category\n        let totalValue = Number(breakdown[category].toFixed(2));\n        (totalValue < 0) \n            ? breakdown[category] = totalValue \n            : delete breakdown[category];\n    })\n\n    return breakdown;\n} \n\n//caculate total credit/debit on account per month\nexport const calculateTotals = (transactions: Transaction[], type: 'credit' | 'debit'): number  => {\n    let total: number = 0;\n    \n    //filter for all transaction of set type, add to total \n    transactions.forEach(transaction => (\n        (transaction['Transaction Type'] === type) && (total += Number(transaction['Amount'])))\n    )\n\n    return Number(total.toFixed(2));\n}\n\n//build summary object\nexport const buildSummary = (noTransfers: Transaction[]): Summary => {\n    let summary: Summary = {};\n\n    //calculare total income\n    let totalIncome = calculateTotals(noTransfers, 'credit');\n    summary['totalIncome'] = totalIncome;\n\n    //calculate total amount speant\n    let totalSpent = calculateTotals(noTransfers, 'debit');\n    summary['totalSpent'] = totalSpent;\n\n    //calculare percent saved\n    summary['percentSaved'] = Math.round(((summary.totalIncome - summary.totalSpent) / summary.totalIncome) * 100);\n\n    //calculate total saved\n    summary['totalSaved'] = totalIncome - totalSpent;\n\n    return summary;\n}\n\n//exclude select fields and categories from transactions array\nexport const cleanData = (transactions: Transaction[], categories: Summary[]): Transaction[] => {\n    //build array of categories to exclude\n    let exclude: string[] = [];\n    categories.forEach(cat => cat.active && exclude.push(cat.name))\n\n    //build cleaned array of transactions\n    let filtered: Transaction[] = [];\n    transactions.forEach(transaction => {\n        //if transaction has data, and does not contain exclude category, add to filtered\n        if(Object.keys(transaction).length > 1 && !exclude.includes(transaction['Category'])){\n            //if each field exists, retun value, else return empty string \n            //transaction type must be either debit/credit\n            filtered.push({\n                'Date': transaction['Date'] ? transaction['Date'] : '',\n                'Description': transaction['Description'] ? transaction['Description'] : '',\n                'Amount': transaction['Amount'] ? transaction['Amount'] : '',\n                'Transaction Type': transaction['Transaction Type'],\n                'Category': transaction['Category'] ? transaction['Category'] : '',\n            })\n        } \n    })\n    \n    return filtered;\n}\n\n//build array containing sorted transactions dates\nexport const buildDateRange = (data: Transaction[]): string[] => {\n    //create array containing all transaction dates\n    let dates: any[] = [];\n    data.map(d => dates.push(new Date(d['Date'])))\n    dates.sort((a, b) => a - b);\n\n    //clean up date formatting in MM/DD/YYYY format\n    let cleanedDates: string[] = [];\n    dates.forEach(date => {\n      //handle year\n      let year = date.getFullYear();\n\n      //handle month\n      let month = (1 + date.getMonth()).toString();\n      month = (month.length > 1) \n                ? month \n                : '0' + month;\n\n      //handle day\n      let day = date.getDate().toString();\n      day = (day.length > 1) \n                ? day \n                : '0' + day;\n      \n      //push formatted date into new array\n      cleanedDates.push(`${month}/${day}/${year}`);\n    })\n\n    return cleanedDates;\n}\n\n//clean up breakdown data to conform to bar chart\nexport const cleanBreakdownData = (data: Breakdown): GraphItem[] => {\n    let cleanedBreakdown:GraphItem[] = [];\n    Object.keys(data).forEach(key => {\n        cleanedBreakdown.push({\n            x: key,\n            y: Math.abs(data[key]),\n            scale: 0\n        })\n    })\n    return cleanedBreakdown;\n}\n\n//build monthly data for selected category over time\nexport const breakdownMonth = (transactions: Transaction[], category: any): GraphItem[] => {\n    //create new object \n    let summary: Summary = {};\n    let graphData: GraphItem[] = [];\n    //loop through transactions\n    transactions.forEach(t => {\n        if(t['Category'] === category){\n            //split dates into MM/YYYY \n            let splitDate = t['Date'].split('/')\n            let condensedDate = `${splitDate[0]}/${splitDate[2]}`;\n            let amount = Number(t['Amount']);\n\n            //if no current value, create new value, if value, add to values\n            (!Object.keys(summary).includes(condensedDate))\n                ? summary[condensedDate] = amount\n                : summary[condensedDate] = Number(summary[condensedDate]) + amount\n        }\n    }) \n\n    //build array for x,y data\n    Object.keys(summary).forEach(key => {\n        graphData.push({ \n            x: key,\n            y: Number(summary[key].toFixed(2)),\n            scale: 0\n        })\n    })\n\n    //reverse data so it sort oldest to most recent\n    let data = graphData.reverse();\n\n    //return data array\n    return data;\n}\n\n//build d3 data visualization around input breakdown data\nexport const buildGraph = (breakdown: any[], el:string, addText: boolean): void => {\n    const margin = 100;\n    const width = 900 - 2 * margin;\n    const height = 500 - 2 * margin;\n    const svg = _d3.select(`svg.${el}`);\n\n    if(svg && breakdown){\n        //clear svg between re-renders\n        svg.selectAll('*').remove();\n\n        const chart = svg.append('g')\n                            .attr('transform', `translate(${margin}, ${margin})`);\n        \n        //define yScale parameters\n        const yScale = _d3.scaleLinear()\n                        .range([height, 0])\n                        .domain([0, _d3.max(breakdown, (b) => b.y)]);\n    \n        //append y axis\n        chart.append('g')\n            .call(_d3.axisLeft(yScale));\n        \n        //define xScale parameters\n        const xScale = _d3.scaleBand()\n                            .rangeRound([0, width])\n                            .domain(breakdown.map(d => d.x))\n                            .padding(0.2)\n                            .align(0.5)\n                            .round(true)\n    \n        //add x-scale amount to object\n        breakdown.forEach(b => {\n            b.scale = xScale(b.x)\n        })\n        \n        //append x axis\n        chart.append('g')\n            .attr('transform', `translate(0, ${height})`)\n            .call(_d3.axisBottom(xScale))\n            .selectAll(\"text\")\t\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-.8em\")\n                .attr(\"dy\", \".15em\")\n                .attr(\"transform\", \"rotate(-65)\");\n    \n        //create bars\n        const bar = chart.selectAll('group')\n                            .data(breakdown)\n                            .enter()\n        \n        //append rect elements for each item\n        bar.append('rect')\n            .style('fill', '#00d9ad')\n            .style('rx', '5')\n            .attr('x', (s) => s.scale)\n            .attr('y', (s) => yScale(s.y))\n            .attr('height', (s) => height - yScale(s.y))\n            .attr('width', xScale.bandwidth())\n        \n        //if text parameter has been set, add text labels to chart\n        if(addText){\n            //define width of current bar\n            let barWidth = xScale.bandwidth();\n\n            //build line chart\n            let line = _d3.line<GraphItem>()\n                            .x((d: GraphItem) => d.scale + margin + barWidth/2)\n                            .y((d: GraphItem) => yScale(d.y) + margin)\n                            .curve(_d3.curveMonotoneX)\n\n            //append line chart\n            svg.append(\"path\")\n                .datum(breakdown)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"hsl(0, 0%, 17%)\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", line)\n\n            //append text elements\n            bar.append('text')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y) - 10)\n                .attr(\"dx\", barWidth/2)\n                .text((s) => `$${formatNumber((s.y).toFixed(2))}`)\n                .attr('font-size', '11px')\n                .attr('text-anchor', 'middle')\n                .attr('fill', 'hsl(0, 0%, 17%)')\n                .attr('font-weight', '800')        \n        }\n    }\n}\n\n//format numbers with commas in the thousands place, and round to 2 decimal pts\nexport const formatNumber = (num: any): string => {\n    let formatted: string = '0';\n\n    if(num) {\n        //round to 2 decimal pts\n        let newFloat = parseFloat(num)\n                            .toFixed(2)\n        //replace commas\n        formatted = newFloat\n                        .toString()\n                        .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n    } \n\n    return formatted;\n}","import React, { useEffect } from 'react';\nimport { \n    buildGraph, \n    cleanBreakdownData \n} from '../utils/utilities';\n\ninterface Props {\n    breakdown: Breakdown;\n}\n\nexport const BreakdownBarChart: React.FC<Props> = ({ breakdown }) => {\n    useEffect(() => {\n        if(!breakdown){\n            return;\n        } else {\n            //build breakdown object to match x/y format\n            let cleanedBreakdown: GraphItem[] = cleanBreakdownData(breakdown)\n            //build data visualization\n            buildGraph(cleanedBreakdown, 'spending-breakdown', false)\n        }\n    }, [breakdown])\n   \n    return (\n        <div className='bar-chart'>\n            <svg className='spending-breakdown' width={900} height={500}></svg>\n        </div>\n    );\n  }","import React from 'react';\nimport { formatNumber } from '../utils/utilities';\n\ninterface Props {\n    breakdown: Breakdown;\n    summary: Summary;\n}\n\nexport const Summary: React.FC<Props> = ({ breakdown, summary }) => {\n    return (\n        <div className=\"dashboard-summary\">\n            <div className=\"summary\">\n                {Object.keys(breakdown)\n                    .sort((a, b) => breakdown[a] - breakdown[b])\n                    .map((item, i) => (\n                        <div className=\"card\" key={i}>\n                            <h3>{item}</h3>\n                            <p className=\"red-warning\">${formatNumber(Math.abs(breakdown[item]))}</p>\n                            <p>{(((Math.abs(breakdown[item])) / summary.totalIncome) * 100).toFixed(2)}% of total income</p>\n                        </div>\n                ))}\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { BreakdownBarChart } from './BreakdownBarChart';\nimport { Summary } from './Summary';\n\ninterface Props {\n    breakdown: Breakdown;\n    dates: string[];\n    summary: Summary;\n}\n\nexport const Dashboard: React.FC<Props> = ({ breakdown, dates, summary }) => {\n    return (\n        <div>\n            <h2>Spending Breakdown{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n            {dates?.length\n               ? <div>\n                    <BreakdownBarChart breakdown={breakdown} />\n                    <Summary breakdown={breakdown} summary={summary}/>\n                </div>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view spending breakdown.</p>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faHome, \n    faChartBar, \n    faList, \n    faCalendarAlt \n} from '@fortawesome/free-solid-svg-icons';\n    \nexport const Sidebar: React.FC = () => {\n    return (\n        <aside className=\"sidebar\">\n            <ul>\n                <li className=\"sidebar-item\">\n                    <NavLink exact to='/spending-analysis/'>\n                        <FontAwesomeIcon icon={faHome} /> Home\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/breakdown'>\n                        <FontAwesomeIcon icon={faChartBar} /> Spending Breakdown\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/monthly'>\n                        <FontAwesomeIcon icon={faCalendarAlt} /> Monthly Data\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/transactions'>\n                        <FontAwesomeIcon icon={faList} /> Transaction List\n                    </NavLink>\n                </li>\n            </ul>\n        </aside>\n    )\n}","import React from 'react';\n\nexport const Header: React.FC = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"custom-shape-divider\">\n                <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\" fill=\"#00d9ad\">\n                    <path d=\"M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\" opacity=\".25\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\" opacity=\".5\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\" className=\"shape-fill\"></path>\n                </svg>\n            </div>\n            \n            <h1>SpendAnalyzer</h1>\n        </div>\n    )\n}","import React from 'react';\nimport { formatNumber } from '../utils/utilities';\n\ninterface Props {\n    dates: string[];\n    summary: Summary;\n}\n\nexport const Overview: React.FC<Props> = ({ dates, summary }) => {\n    return (\n        <div className=\"home-summary\">\n            <h2>{dates?.length ? `${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n            <div className=\"spending-summary\">\n                <div className=\"card\">\n                    <h3>Total Income +</h3>\n                    <p className=\"green-success\">${formatNumber(summary.totalIncome)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Total Spent -</h3>\n                    <p className=\"red-warning\">${formatNumber(summary.totalSpent)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Total Saved</h3>\n                    <p className=\"green-success\">${formatNumber(summary.totalSaved)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Percent Saved</h3>\n                    <p className={(summary.percentSaved > 50) ? 'green-success' : 'red-warning'}>{summary.percentSaved}%</p>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faTimes, \n    faPlus, \n    faMinus \n} from '@fortawesome/free-solid-svg-icons';\n\ninterface Props {\n    transactions: Transaction[];\n    categories: Summary[];\n    toggleCategory: (category: Summary) => void;\n}\n\nexport const Categories: React.FC<Props> = ({ categories, toggleCategory }) => {\n    const [showDropdown, setShowDropdown] = useState(false);\n    const activeCat = categories.filter(cat => cat.active);\n\n    return (\n        <div className=\"category-container\">\n            <h2 onClick={() => showDropdown ? setShowDropdown(false) : setShowDropdown(true)}>\n                <span>Exclude Categories ({activeCat.length})</span>\n                { showDropdown \n                    ? <FontAwesomeIcon className=\"icon\" icon={faMinus} /> \n                    : <FontAwesomeIcon className=\"icon\" icon={faPlus} />\n                }\n            </h2>\n            { showDropdown \n                ? <div>\n                    <p>Select a category to exclude it from your list of transactions</p>\n                    <div className=\"category-exclusion\">\n                        {categories.map((cat, i) =>  (\n                            <div \n                                key={i} \n                                className={`category-option ${cat?.active ? 'selected' : ''}`}\n                                onClick={() => toggleCategory(cat)}\n                            >\n                                <FontAwesomeIcon icon={faTimes} />\n                                <span className=\"category-label\">{cat.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                : <div className=\"category-exclusion\">\n                {activeCat.map((cat, i) =>  (\n                    <div \n                        key={i} \n                        className={`category-option ${cat?.active ? 'selected' : ''}`}\n                        onClick={() => toggleCategory(cat)}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                        <span className=\"category-label\">{cat.name}</span>\n                    </div>\n                ))}\n            </div>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { Overview } from './Overview'\nimport { Categories } from './Categories'\n\ninterface Props {\n    onFileLoad: (transactions: Transaction[], fileInfo: any) => void;\n    toggleCategory: (category: Summary) => void;\n    transactions: Transaction[];\n    dates: string[];\n    summary: Summary;\n    file: string;\n    error: boolean;\n    categories: Summary[]\n}\n\nexport const Home: React.FC<Props> = ({ \n    onFileLoad, \n    transactions, \n    dates, \n    summary, \n    file, \n    error, \n    categories, \n    toggleCategory \n}) => {\n    return (\n        <div className=\"home\">\n            <h2>Welcome!</h2>\n            {!transactions?.length ? <p className=\"error-message\">Please select a CSV file to upload.</p> : null}\n            \n            {error ? <p className=\"error-message\">Something went wrong. Please try again.</p> : null}\n\n            <div className=\"csv-upload\">\n                <CSVReader\n                    parserOptions={{ header: true }}\n                    onFileLoaded={(data, fileInfo) => onFileLoad(data, fileInfo)}\n                />\n\n                <p>\n                    {file \n                        ? <span className=\"success-message\">Currently reading: <strong>{file}</strong></span> \n                        : <span>No file selected</span>\n                    }\n                </p>\n            </div>\n\n            {transactions?.length \n                ? <div>\n                    <Categories \n                        transactions={transactions}\n                        categories={categories}\n                        toggleCategory={toggleCategory}\n                    />\n                    <Overview \n                        dates={dates} \n                        summary={summary}\n                    />\n                </div>\n                : null\n            }\n        </div>\n    )\n}","import React from 'react';\n\ninterface Props {\n    transaction: Transaction;\n}\n\nexport const Transaction: React.FC<Props> = ({ transaction }) => {\n    return (\n        <tr>\n            {Object.keys(transaction).map((item, i) => (\n                <td key={i} className=\"transaction-field\">\n                    <p>{transaction[item]}</p>\n                </td>\n            ))}\n        </tr>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Transaction } from './Transaction'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faChevronLeft, \n    faChevronRight \n} from '@fortawesome/free-solid-svg-icons';\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n}\n\nexport const TransactionsList: React.FC<Props> = ({ transactions, dates }) => {\n    const [page, setPage] = useState(1);\n    const [perPageStart, setPerPageStart] = useState(0);\n    const [perPageEnd, setPerPageEnd] = useState(20);\n\n    const totalPages = Math.ceil(transactions.length / 20);\n\n    const prevPage = (): void => {\n        if(page > 1){\n            let newPage = page - 1;\n            setPage(newPage);\n\n            let pageStart = perPageStart - 20;\n            let pageEnd = perPageStart;\n\n            setPerPageStart(pageStart)\n            setPerPageEnd(pageEnd)\n        }\n    }\n\n    const nextPage = (): void => {\n        if(page < totalPages){\n            let newPage = page + 1;\n            setPage(newPage);\n\n            let pageStart = perPageStart + 20;\n            let pageEnd = pageStart + 20\n\n\n            setPerPageStart(pageStart)\n            setPerPageEnd(pageEnd)\n        }\n    }\n\n    useEffect(() => {\n    }, [page])\n \n \n    return (\n        <div className=\"transactions-list\">\n            <h2>Transaction List{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n            <div className=\"transaction-toolbar\">\n                <p>\n                    Showing \n                    {(totalPages > 1) && \n                        ` ${perPageStart + 1} - ${\n                            (perPageEnd > transactions.length) \n                                ? transactions.length \n                                : perPageEnd} of `\n                    }\n                    {transactions?.length \n                        ? transactions.length \n                        : '0'\n                    } transaction{transactions.length !== 1 ? 's' : ''}\n                </p>\n                <div className=\"pagination\">\n                    <button \n                        className=\"prev-btn\" \n                        onClick={() => prevPage()\n                    }>\n                        <FontAwesomeIcon \n                            icon={faChevronLeft} \n                            className=\"icon\"\n                        />\n                        Prev\n                    </button>\n\n                    <p>Page {page} of {totalPages}</p>\n\n                    <button \n                        className=\"next-btn\" \n                        onClick={() => nextPage()\n                    }>\n                        Next\n                        <FontAwesomeIcon \n                            icon={faChevronRight} \n                            className=\"icon\"\n                        />\n                    </button>\n                </div>\n            </div>\n            { transactions?.length\n                ? <table className=\"transactions-table\">\n                    <thead>\n                        <tr>\n                            {(transactions?.length > 0) && Object.keys(transactions[0]).map((item, i) => (\n                                <th key={i}>{item}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {transactions.map((transaction, i) => (\n                            (i > perPageStart && i <= perPageEnd) && \n                            <Transaction \n                                key={i} \n                                transaction={transaction} \n                            />\n                        ))}\n                    </tbody>\n                </table>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view your transactions list.</p>\n            }\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { \n    buildGraph, \n    breakdownMonth \n} from '../utils/utilities';\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n    breakdown: Breakdown;\n}\n\nexport const Monthly: React.FC<Props> = ({ transactions, dates, breakdown }) => {\n    //array of all categories in transaction list\n    const categories = Object.keys(breakdown);\n    //set initial category to populate dropdown & viz\n    const [activeCat, setActiveCat] = useState(categories[0]);\n\n    useEffect(() => {\n        if(!transactions){\n            return;\n        } else {\n            //if changes in activeCat or transactions, re-build visualization\n            const monthlyBreakdown = breakdownMonth(transactions, activeCat);\n            buildGraph(monthlyBreakdown, 'monthly-breakdown', true)\n        }\n    }, [transactions, activeCat])\n\n    return (\n        <div className=\"monthly-chart\">\n            <h2>Monthly Data{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 2]}` : ''}</h2>\n\n            {transactions?.length\n                ? <div> \n                    <div className=\"monthly-select\">\n                        <div className=\"select-container\">\n                            <select onChange={e => {\n                                const target = e.target as HTMLSelectElement;\n                                const cat: any = target.value;\n                                setActiveCat(cat)\n                            }} \n                            value={activeCat}\n                            className=\"monthly-dropdown\">\n                                {categories.map(cat => (\n                                    <option key={cat} value={cat}>{cat}</option>\n                                ))}\n                            </select>\n                            <span className=\"focus\"></span>\n                        </div>\n                        <h3>{activeCat}</h3>\n                    </div>\n                    <svg className='monthly-breakdown' width={900} height={500}></svg>\n                </div>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view monthly spending summary.</p>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Dashboard } from './components/Dashboard';\nimport { Sidebar } from './components/Sidebar';\nimport { Header } from './components/Header';\nimport { Home } from './components/Home';\nimport { TransactionsList } from './components/TransactionsList';\nimport { Monthly } from './components/Monthly';\nimport { \n  buildBreakdown, \n  cleanData,\n  buildDateRange,\n  buildSummary\n} from './utils/utilities';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nconst initialTransactions: Transaction[] = [];\nconst emptyArray: any[] = [];\n\nexport const App: React.FC<{}> = () => {\n  const [initial, setInitial] = useState(initialTransactions)\n  const [transactions, setTransactions] = useState(initialTransactions)\n  const [breakdown, setBreakdown] = useState({})\n  const [summary, setSummary] = useState({})\n  const [dates, setDates] = useState(emptyArray)\n  const [file, setFile] = useState('')\n  const [error, setError] = useState(false)\n  const [categories, setCategories] = useState(emptyArray)\n\n  //build data on file load\n  const onFileLoad = (data: Transaction[], fileInfo: any): void => {\n    if(data){\n      setFile(fileInfo.name)\n\n      //remove extraneous fields from transations object\n      const cleanedData = cleanData(data, categories)\n      setTransactions(cleanedData)\n      \n      //set initial category array - duplicated to preserve original list\n      setInitial(cleanedData)\n\n      //build spending summary from transaction data\n      createSummary(cleanedData)\n\n      let categoryArray: string[] = [];\n      let categoryObj: Summary[] = []\n\n      cleanedData.forEach(transaction => {\n        if(!categoryArray.includes(transaction['Category'])) {\n          var key = transaction['Category'];\n          categoryArray.push(key)\n          categoryObj.push({ \n              name: key,\n              active: false \n          })\n        }\n      })\n\n      setCategories(categoryObj)\n\n    } else {\n      //set error status to true\n      setError(true)\n    }\n  }\n\n  const toggleCategory = (category: Summary): void => {\n    let toggledCategories: Summary[] = []\n  \n    categories.forEach(cat => {\n      if(cat.name === category.name){\n        toggledCategories.push({\n          ...cat,\n          active: (cat.active) ? false : true\n        })\n      } else {\n        toggledCategories.push(cat)\n      }\n    })\n\n    setCategories(toggledCategories)\n\n    const cleanedData = cleanData(initial, toggledCategories)\n    setTransactions(cleanedData)\n\n    //build spending summary from transaction data\n    createSummary(cleanedData)\n  }\n\n  //create spending summary (breadown, date range, summary)\n  const createSummary = (transactions: Transaction[]): void => { \n      //set category breakdown\n      let newBreakdown = buildBreakdown(transactions)\n      setBreakdown(newBreakdown)\n\n      let dateRange = buildDateRange(transactions)\n      setDates(dateRange);\n\n      let newSummary = buildSummary(transactions);\n      setSummary(newSummary)\n  }\n\n  return (\n    <Router>\n      <div className=\"main\">\n        <Header />\n\n        <div className=\"main-container\">\n          <Sidebar />\n\n          <main className=\"dashboard-container\">\n            <Switch>\n                <Route path='/spending-analysis/breakdown'>\n                  <Dashboard \n                    breakdown={breakdown} \n                    dates={dates}\n                    summary={summary}\n                  />\n                </Route>\n                <Route path='/spending-analysis/monthly'>\n                  <Monthly \n                    transactions={transactions} \n                    dates={dates}\n                    breakdown={breakdown} \n                  />\n                </Route>\n                <Route path='/spending-analysis/transactions'>\n                  <TransactionsList \n                    transactions={transactions} \n                    dates={dates}\n                  />\n                </Route>\n                <Route path=\"/\">\n                  <Home \n                    onFileLoad={onFileLoad} \n                    transactions={transactions} \n                    dates={dates}\n                    summary={summary}\n                    file={file}\n                    error={error}\n                    categories={categories}\n                    toggleCategory={toggleCategory}\n                  />\n                </Route>\n              </Switch>\n            </main>\n          </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}