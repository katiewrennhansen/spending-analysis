{"version":3,"sources":["utils/utilities.tsx","components/BreakdownBarChart.tsx","components/Summary.tsx","components/Dashboard.tsx","components/Sidebar.tsx","components/Header.tsx","components/Home.tsx","components/Transaction.tsx","components/TransactionsList.tsx","components/Monthly.tsx","App.tsx","index.tsx"],"names":["calculateTotals","transactions","type","totalSpent","forEach","transaction","Number","toFixed","buildGraph","breakdown","el","addText","margin","svg","_d3","selectAll","remove","chart","append","attr","yScale","range","domain","b","y","call","xScale","rangeRound","map","d","x","padding","align","round","scale","style","bar","data","enter","s","bandwidth","text","BreakdownBarChart","useEffect","cleanedBreakdown","Object","keys","key","push","Math","abs","cleanBreakdownData","className","width","height","Summary","summary","sort","a","item","i","totalIncome","Dashboard","dates","length","Sidebar","exact","to","icon","faHome","faChartBar","faCalendarAlt","faList","Header","data-name","xmlns","viewBox","preserveAspectRatio","fill","opacity","Home","onFileLoad","file","parserOptions","header","onFileLoaded","fileInfo","totalSaved","percentSaved","Transaction","TransactionsList","Monthly","categories","useState","activeCat","setActiveCat","monthlyBreakdown","category","graphData","t","splitDate","split","condensedDate","includes","reverse","breakdownMonth","onChange","e","cat","target","value","initialTransactions","emptyDates","App","setTransactions","setBreakdown","setSummary","setDates","setFile","toExclude","createSummary","newBreakdown","filter","totalValue","buildBreakdown","dateRange","Date","cleanedDates","date","year","getFullYear","month","getMonth","toString","day","getDate","buildDateRange","newSummary","noTransfers","buildSummary","path","name","cleanedData","exclude","filtered","cleanData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02954f13.chunk.js","sourcesContent":["import * as _d3 from 'd3';\n\n/*  \n    ====================\n    AVAILABLE FUNTIONS\n    ====================\n    1. buildBreakdown - build category breakdown\n    2. calculateTotals - caculate total credit/debit on account per month\n    3. buildSummary - build summary object\n    4. cleanData - exclude select fields and categories from transactions array\n    5. buildDateRange - build array containing sorted transactions dates\n    6. cleanBreakdownData - clean up breakdown data to conform to bar chart\n    7. breakdownMonth - build monthly data for selected category over time\n    8. buildGraph - build d3 visualization\n*/\n\n\n//build category breakdown\nexport const buildBreakdown = (transactions: Transaction[]): Breakdown => {\n    let categories: string[] = [];\n    let breakdown: Breakdown = {};\n\n    //build array of categories\n    transactions\n        .map(transaction => (!categories.includes(transaction['Category'])) ? categories.push(transaction['Category']) : null)\n\n    //break out spending into cateogries\n    categories.forEach(category => {\n        breakdown[category] = 0;\n        transactions\n            .filter(transaction => transaction['Category'] === category)\n            .forEach(transaction => {\n                if(transaction['Transaction Type'] === 'credit') breakdown[category] += Number(transaction['Amount']);\n                else breakdown[category] -= Number(transaction['Amount']);\n            })\n        \n        let totalValue = Number(breakdown[category].toFixed(2));\n        if(totalValue < 0) breakdown[category] = totalValue;\n        else delete breakdown[category];\n    })\n\n    return breakdown;\n} \n\n//caculate total credit/debit on account per month\nexport const calculateTotals = (transactions: Transaction[], type: 'credit' | 'debit'): number  => {\n    let totalSpent: number = 0;\n    transactions.forEach(transaction => {\n        //filter for all transaction of set type\n        if(transaction['Transaction Type'] === type){\n            //add to totalSpent\n            totalSpent += Number(transaction['Amount']);\n        }\n    })\n    return Number(totalSpent.toFixed(2));\n}\n\n//build summary object\nexport const buildSummary = (noTransfers: Transaction[]): Summary => {\n    let summary: Summary = {};\n\n    //calculare total income\n    let totalIncome = calculateTotals(noTransfers, 'credit');\n    summary['totalIncome'] = totalIncome;\n\n    //calculate total amount speant\n    let totalSpent = calculateTotals(noTransfers, 'debit');\n    summary['totalSpent'] = totalSpent;\n\n    //calculare percent saved\n    summary['percentSaved'] = Math.round(((summary.totalIncome - summary.totalSpent) / summary.totalIncome) * 100);\n\n    //calculate total saved\n    summary['totalSaved'] = totalIncome - totalSpent;\n\n    return summary;\n}\n\n//exclude select fields and categories from transactions array\nexport const cleanData = (transactions: Transaction[], exclude: string[]): Transaction[] => {\n    let filtered: Transaction[] = [];\n    \n    transactions.forEach(transaction => {\n        //if transaction has data, and does not contain exclude category, add to filtered\n        if(Object.keys(transaction).length > 1 && !exclude.includes(transaction['Category'])){\n            //if each field exists, retun value, else return empty string \n            //transaction type must be either debit/credit\n            filtered.push({\n                'Date': transaction['Date'] ? transaction['Date'] : '',\n                'Account Name': transaction['Account Name'] ? transaction['Account Name'] : '',\n                'Description': transaction['Description'] ? transaction['Description'] : '',\n                'Amount': transaction['Amount'] ? transaction['Amount'] : '',\n                'Transaction Type': transaction['Transaction Type'],\n                'Category': transaction['Category'] ? transaction['Category'] : '',\n            })\n        } \n    })\n    \n    return filtered;\n}\n\n//build array containing sorted transactions dates\nexport const buildDateRange = (data: Transaction[]): any[] => {\n    //create array containing all transaction dates\n    let dates: any[] = [];\n    data.map(d => dates.push(new Date(d['Date'])))\n    dates.sort((a, b) => a - b);\n\n    //clean up date formatting in MM/DD/YYYY format\n    let cleanedDates: string[] = [];\n    dates.forEach(date => {\n      //handle year\n      let year = date.getFullYear();\n\n      //handle month\n      let month = (1 + date.getMonth()).toString();\n      month = month.length > 1 ? month : '0' + month;\n\n      //handle day\n      let day = date.getDate().toString();\n      day = day.length > 1 ? day : '0' + day;\n      \n      //push formatted date into new array\n      cleanedDates.push(`${month}/${day}/${year}`);\n    })\n\n    return cleanedDates;\n}\n\n//clean up breakdown data to conform to bar chart\nexport const cleanBreakdownData = (data: Breakdown): any[] => {\n    let cleanedBreakdown:any[] = [];\n    Object.keys(data).forEach(key => {\n        cleanedBreakdown.push({\n            x: key,\n            y: Math.abs(data[key])\n        })\n    })\n    return cleanedBreakdown;\n}\n\n//build monthly adata for selected category over time\nexport const breakdownMonth = (transactions: Transaction[], category: any): any[] => {\n    //create new object \n    let summary: Summary = {};\n    let graphData: any[] = [];\n    //loop through transactions\n    transactions.forEach(t => {\n        if(t['Category'] === category){\n            //split dates into MM/YYYY \n            let splitDate = t['Date'].split('/')\n            let condensedDate = `${splitDate[0]}/${splitDate[2]}`;\n            //if no current value, create new value\n            if(!Object.keys(summary).includes(condensedDate)){\n                summary[condensedDate] = Number(t['Amount'])\n            } else {\n                //if value, add to values\n                summary[condensedDate] = Number(summary[condensedDate]) + Number(t['Amount']);\n            }\n        }\n    }) \n\n    //build array for x,y data\n    Object.keys(summary).forEach(key => {\n        graphData.push({ \n            x: key,\n            y: Number(summary[key].toFixed(2))\n        })\n    })\n\n    //reverse data so it sort oldest to most recent\n    let data = graphData.reverse();\n\n    //return data array\n    return data;\n}\n\n//build d3 data visualization around input breakdown data\nexport const buildGraph = (breakdown: any[], el:string, addText: boolean): void => {\n    const margin = 100;\n    const width = 900 - 2 * margin;\n    const height = 500 - 2 * margin;\n    const svg = _d3.select(`svg.${el}`);\n\n    if(svg){\n        svg.selectAll('*').remove();\n\n        const chart = svg.append('g')\n                            .attr('transform', `translate(${margin}, ${margin})`);\n        \n        //define yScale parameters\n        const yScale = _d3.scaleLinear()\n                        .range([height, 0])\n                        .domain([0, _d3.max(breakdown, (b) => b.y)]);\n    \n        //append y axis\n        chart.append('g')\n            .call(_d3.axisLeft(yScale));\n        \n        //define xScale parameters\n        const xScale = _d3.scaleBand()\n                            .rangeRound([0, width])\n                            .domain(breakdown.map(d => d.x))\n                            .padding(0.2)\n                            .align(0.5)\n                            .round(true)\n    \n        //add x-scale amount to object\n        breakdown.forEach(b => {\n            b.scale = xScale(b.x)\n        })\n        \n        //append x axis\n        chart.append('g')\n            .attr('transform', `translate(0, ${height})`)\n            .call(_d3.axisBottom(xScale))\n            .selectAll(\"text\")\t\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-.8em\")\n                .attr(\"dy\", \".15em\")\n                .attr(\"transform\", \"rotate(-65)\");\n    \n        //create bars\n        const bar = chart.selectAll('group')\n                            .data(breakdown)\n                            .enter()\n        \n        //append rect elements for each item\n        bar.append('rect')\n            .style('fill', '#00d9ad')\n            .style('rx', '5')\n            .attr('x', (s) => s.scale)\n            .attr('y', (s) => yScale(s.y))\n            .attr('height', (s) => height - yScale(s.y))\n            .attr('width', xScale.bandwidth())\n        \n        //if text parameter has been set, add text labels to chart\n        if(addText){\n            bar.append('text')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y) - 5)\n                .text((d) => `$${(d.y).toFixed(2)}`)\n                .attr('font-size', '10px')\n        }\n    }\n}","import React, { useEffect } from 'react';\nimport { \n    buildGraph, \n    cleanBreakdownData \n} from '../utils/utilities';\n\ninterface Props {\n    breakdown: Breakdown;\n}\n\nexport const BreakdownBarChart: React.FC<Props> = ({ breakdown }) => {\n    useEffect(() => {\n        if(!breakdown){\n            return;\n        } else {\n            //build breakdown object to match x/y format\n            let cleanedBreakdown = cleanBreakdownData(breakdown)\n            //build data visualization\n            buildGraph(cleanedBreakdown, 'spending-breakdown', false)\n        }\n    }, [breakdown])\n   \n    return (\n        <div className='bar-chart'>\n            { breakdown\n                ? null\n                : <div>Sorry, no data currently available.</div>\n            }\n            <svg className='spending-breakdown' width={900} height={500}></svg>\n        </div>\n    );\n  }","import React from 'react';\n\ninterface Props {\n    breakdown: Breakdown;\n    summary: Summary;\n}\n\nexport const Summary: React.FC<Props> = ({ breakdown, summary }) => {\n    return (\n        <div className=\"dashboard-summary\">\n            <div className=\"summary\">\n                { Object.keys(breakdown)\n                    .sort((a, b) => breakdown[a] - breakdown[b])\n                    .map((item, i) => (\n                        <div className=\"card\" key={i}>\n                            <h3>{item}</h3>\n                            <p className=\"red-warning\">${Math.abs(breakdown[item]).toFixed(2)}</p>\n                            <p>{(((Math.abs(breakdown[item])) / summary.totalIncome) * 100).toFixed(2)}% of total income</p>\n                        </div>\n                ))}\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { BreakdownBarChart } from './BreakdownBarChart';\nimport { Summary } from './Summary';\n\ninterface Props {\n    breakdown: Breakdown;\n    dates: string[];\n    summary: Summary;\n}\n\nexport const Dashboard: React.FC<Props> = ({ breakdown, dates, summary }) => {\n    return (\n        <div>\n            <h2>Spending Breakdown{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n            { dates?.length\n               ? <div>\n                    <BreakdownBarChart breakdown={breakdown} />\n                    <Summary breakdown={breakdown} summary={summary}/>\n                </div>\n                : <p>There is no data available. Please upload a CSV to view spending breakdown.</p>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faHome, \n    faChartBar, \n    faList, \n    faCalendarAlt \n} from '@fortawesome/free-solid-svg-icons';\n    \nexport const Sidebar: React.FC = () => {\n    return (\n        <aside className=\"sidebar\">\n            <ul>\n                <li className=\"sidebar-item\">\n                    <NavLink exact to='/'>\n                        <FontAwesomeIcon icon={faHome} /> Home\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/breakdown'>\n                        <FontAwesomeIcon icon={faChartBar} /> Spending Breakdown\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/monthly'>\n                        <FontAwesomeIcon icon={faCalendarAlt} /> Monthly Data\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/transactions'>\n                        <FontAwesomeIcon icon={faList} /> Transaction List\n                    </NavLink>\n                </li>\n            </ul>\n        </aside>\n    )\n}","import React from 'react';\n\nexport const Header: React.FC = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"custom-shape-divider\">\n                <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\" fill=\"#00d9ad\">\n                    <path d=\"M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\" opacity=\".25\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\" opacity=\".5\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\" className=\"shape-fill\"></path>\n                </svg>\n            </div>\n            \n            <h1>SpendAnalyzer</h1>\n        </div>\n    )\n}","import React from 'react';\nimport CSVReader from 'react-csv-reader';\n\ninterface Props {\n    onFileLoad: (transactions: Transaction[], fileInfo: any) => void;\n    transactions: Transaction[];\n    dates: string[];\n    summary: Summary;\n    file: string;\n}\n\nexport const Home: React.FC<Props> = ({ onFileLoad, transactions, dates, summary, file }) => {\n    return (\n        <div className=\"home\">\n            <h2>Welcome!</h2>\n            { !transactions?.length ? <p>Please select a CSV file to upload.</p> : null}\n\n            <div className=\"csv-upload\">\n                <CSVReader\n                    parserOptions={{ header: true }}\n                    onFileLoaded={(data, fileInfo) => onFileLoad(data, fileInfo)}\n                />\n\n                <p>{ file ? <span>Currently reading: <strong>{file}</strong></span> : 'No file selected' }</p>\n            </div>\n\n            { transactions?.length \n                ? <div className=\"home-summary\">\n                    <h2>{dates?.length ? `${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n                    <div className=\"spending-summary\">\n                        <div className=\"card\">\n                            <h3>Total Income +</h3>\n                            <p className=\"green-success\">${summary.totalIncome}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Total Spent -</h3>\n                            <p className=\"red-warning\">${summary.totalSpent}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Total Saved</h3>\n                            <p className=\"green-success\">${summary.totalSaved}</p>\n                        </div>\n                        <div className=\"card\">\n                            <h3>Percent Saved</h3>\n                            <p className={(summary.percentSaved > 50) ? 'green-success' : 'red-warning'}>{summary.percentSaved}%</p>\n                        </div>\n                    </div>\n                </div>\n                : null\n            }\n           \n        </div>\n    )\n}","import React from 'react';\n\ninterface Props {\n    transaction: Transaction;\n}\n\nexport const Transaction: React.FC<Props> = ({ transaction }) => {\n    return (\n        <tr>\n            {Object.keys(transaction).map((item, i) => (\n                <td key={i} className=\"transaction-field\">\n                    <p>{transaction[item]}</p>\n                </td>\n            ))}\n        </tr>\n    )\n}","import React from 'react';\nimport { Transaction } from './Transaction'\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n}\n\nexport const TransactionsList: React.FC<Props> = ({ transactions, dates }) => {\n    return (\n        <div className=\"transactions-list\">\n            <h2>Transaction List{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 1]}` : ''}</h2>\n            <p>Showing {transactions?.length ? transactions.length : '0'} transaction{transactions.length !== 1 ? 's' : ''}</p>\n            { transactions?.length\n                ? <table className=\"transactions-table\">\n                    <thead>\n                        <tr>\n                            { (transactions?.length > 0) && Object.keys(transactions[0]).map((item, i) => (\n                                <th key={i}>{item}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { transactions.map((transaction, i) => (\n                            <Transaction \n                                key={i} \n                                transaction={transaction} \n                            />\n                        ))}\n                    </tbody>\n                </table>\n                : <p>There is no data available. Please upload a CSV to view your transactions list.</p>\n            }\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { \n    buildGraph, \n    breakdownMonth \n} from '../utils/utilities';\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n    breakdown: Breakdown;\n}\n\nexport const Monthly: React.FC<Props> = ({ transactions, dates, breakdown }) => {\n    //array of all categories in transaction list\n    const categories = Object.keys(breakdown);\n    //set initial category to populate dropdown & viz\n    const [activeCat, setActiveCat] = useState(categories[0]);\n\n    useEffect(() => {\n        if(!transactions){\n            return;\n        } else {\n            //if changes in activeCat or transactions, re-build visualization\n            const monthlyBreakdown = breakdownMonth(transactions, activeCat);\n            buildGraph(monthlyBreakdown, 'monthly-breakdown', true)\n        }\n    }, [transactions, activeCat])\n\n    return (\n        <div className=\"monthly-chart\">\n            <h2>Monthly Data{dates?.length ? `: ${dates[0]} - ${dates[dates.length - 2]}` : ''}</h2>\n\n            { transactions?.length\n                ? <div> \n                    <div className=\"monthly-select\">\n                        <div className=\"select-container\">\n                            <select onChange={e => {\n                                const target = e.target as HTMLSelectElement;\n                                const cat: any = target.value;\n                                setActiveCat(cat)\n                            }} \n                            value={activeCat}\n                            className=\"monthly-dropdown\">\n                                { categories.map(cat => (\n                                    <option key={cat} value={cat}>{cat}</option>\n                                ))}\n                            </select>\n                            <span className=\"focus\"></span>\n                        </div>\n                        <h3>{activeCat}</h3>\n                    </div>\n                    <svg className='monthly-breakdown' width={900} height={500}></svg>\n                </div>\n                : <p>There is no data available. Please upload a CSV to view monthly spending summary.</p>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Dashboard } from './components/Dashboard';\nimport { Sidebar } from './components/Sidebar';\nimport { Header } from './components/Header';\nimport { Home } from './components/Home';\nimport { TransactionsList } from './components/TransactionsList';\nimport { Monthly } from './components/Monthly';\nimport { \n  buildBreakdown, \n  cleanData,\n  buildDateRange,\n  buildSummary\n} from './utils/utilities';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\n\nconst initialTransactions: Transaction[] = [];\nconst emptyDates: string[] = [];\n\nexport const App: React.FC<{}> = () => {\n  const [transactions, setTransactions] = useState(initialTransactions)\n  const [breakdown, setBreakdown] = useState({})\n  const [summary, setSummary] = useState({})\n  const [dates, setDates] = useState(emptyDates)\n  const [file, setFile] = useState('')\n\n  let toExclude: string[] = ['Transfer', 'Credit Card Payment']\n\n  //build data on file load\n  const onFileLoad = (data: Transaction[], fileInfo: any): void => {\n    if(data){\n      setFile(fileInfo.name)\n\n      //remove extraneous fields from transations object\n      const cleanedData = cleanData(data, toExclude)\n      setTransactions(cleanedData)\n\n      //build spending summary from transaction data\n      createSummary(cleanedData)\n    }\n  }\n\n  //create spending summary (breadown, date range, summary)\n  const createSummary = (transactions: Transaction[]): void => { \n      //set category breakdown\n      let newBreakdown = buildBreakdown(transactions)\n      setBreakdown(newBreakdown)\n\n      let dateRange = buildDateRange(transactions)\n      setDates(dateRange);\n\n      let newSummary = buildSummary(transactions);\n      setSummary(newSummary)\n  }\n\n  return (\n    <Router>\n      <div className=\"main\">\n        <Header />\n\n        <div className=\"main-container\">\n          <Sidebar />\n\n          <main className=\"dashboard-container\">\n            <Switch>\n                <Route path='/breakdown'>\n                  <Dashboard \n                    breakdown={breakdown} \n                    dates={dates}\n                    summary={summary}\n                  />\n                </Route>\n                <Route path='/monthly'>\n                  <Monthly \n                    transactions={transactions} \n                    dates={dates}\n                    breakdown={breakdown} \n                  />\n                </Route>\n                <Route path='/transactions'>\n                  <TransactionsList \n                    transactions={transactions} \n                    dates={dates}\n                  />\n                </Route>\n                <Route exact path=\"/\">\n                  <Home \n                    onFileLoad={onFileLoad} \n                    transactions={transactions} \n                    dates={dates}\n                    summary={summary}\n                    file={file}\n                  />\n                </Route>\n              </Switch>\n            </main>\n          </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}