{"version":3,"sources":["utils/utilities.tsx","utils/dataManupulation.tsx","components/BreakdownBarChart.tsx","components/Summary.tsx","components/Dashboard.tsx","components/Sidebar.tsx","components/Header.tsx","components/Overview.tsx","components/Categories.tsx","components/Home.tsx","components/Transaction.tsx","components/Toolbar.tsx","components/TransactionsList.tsx","components/Monthly.tsx","App.tsx","index.tsx"],"names":["calculateTotals","transactions","type","total","forEach","transaction","Number","toFixed","buildGraph","breakdown","el","addText","margin","svg","_d3","selectAll","remove","chart","append","attr","yScale","range","domain","b","y","call","xScale","rangeRound","map","d","x","padding","align","round","scale","style","bar","data","enter","s","bandwidth","barWidth","line","curve","datum","text","formatNumber","num","formatted","parseFloat","toString","replace","excludeCategories","categories","exclude","cat","name","length","active","push","filter","includes","BreakdownBarChart","useEffect","cleanedBreakdown","Object","keys","key","Math","abs","cleanBreakdownData","className","preserveAspectRatio","viewBox","Summary","summary","sort","a","item","i","totalIncome","Dashboard","dates","Sidebar","exact","to","icon","faHome","faChartBar","faCalendarAlt","faList","Header","data-name","xmlns","fill","opacity","Overview","totalSpent","totalSaved","percentSaved","Categories","toggleCategory","useState","showDropdown","setShowDropdown","activeCat","onClick","faMinus","faPlus","faTimes","Home","onFileLoad","file","error","parserOptions","header","onFileLoaded","fileInfo","faCheckCircle","Transaction","Toolbar","totalPages","perPageStart","perPageEnd","page","prevPage","nextPage","faChevronLeft","faChevronRight","TransactionsList","setPage","setPerPageStart","setPerPageEnd","ceil","pageStart","pageEnd","Monthly","setActiveCat","monthlyBreakdown","category","graphData","t","splitDate","split","condensedDate","amount","reverse","breakdownMonth","onChange","e","target","value","initialTransactions","emptyDates","emptyCategories","App","initial","setInitial","setTransactions","setBreakdown","setSummary","setDates","setFile","setError","setCategories","createSummary","newBreakdown","totalValue","buildBreakdown","dateRange","Date","valueOf","cleanedDates","date","year","getFullYear","month","getMonth","day","getDate","buildDateRange","newSummary","noTransfers","buildSummary","path","cleanedData","transactionList","cleanData","categoryObj","categoryArray","buildCategories","toggledCategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3129bf1e.chunk.js","sourcesContent":["import * as _d3 from 'd3';\n\n/*  \n    ====================\n    AVAILABLE FUNTIONS\n    ====================\n    1. calculateTotals - caculate total credit/debit on account per month\n    2. buildGraph - build d3 visualization\n    3. formatNumber - format numbers with commas in the thousands place, and round to 2 decimal pts\n*/\n\n//caculate total credit/debit on account per month\nexport const calculateTotals = (transactions: Transaction[], type: 'credit' | 'debit'): number  => {\n    let total: number = 0;\n    \n    //filter for all transaction of set type, add to total \n    transactions.forEach(transaction => (\n        (transaction['Transaction Type'] === type) && (total += Number(transaction['Amount'])))\n    )\n\n    return Number(total.toFixed(2));\n}\n\n//build d3 data visualization around input breakdown data\nexport const buildGraph = (breakdown: any[], el:string, addText: boolean): void => {\n    const margin = 80;\n    const width = 900;\n    const height = 500;\n    const svg = _d3.select(`svg.${el}`)\n\n    if(svg && breakdown){\n        //clear svg between re-renders\n        svg.selectAll('*').remove();\n\n        const chart = svg.append('g')\n                            .attr('transform', `translate(${margin}, ${margin})`);\n        \n        //define yScale parameters\n        const yScale = _d3.scaleLinear()\n                        .range([height, 0])\n                        .domain([0, _d3.max(breakdown, (b) => b.y)]);\n    \n        //append y axis\n        chart.append('g')\n            .call(_d3.axisLeft(yScale));\n        \n        //define xScale parameters\n        const xScale = _d3.scaleBand()\n                            .rangeRound([0, width])\n                            .domain(breakdown.map(d => d.x))\n                            .padding(0.2)\n                            .align(0.5)\n                            .round(true)\n    \n        //add x-scale amount to object\n        breakdown.forEach(b => {\n            b.scale = xScale(b.x)\n        })\n        \n        //append x axis\n        chart.append('g')\n            .attr('transform', `translate(0, ${height})`)\n            .call(_d3.axisBottom(xScale))\n            .selectAll(\"text\")\t\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-.8em\")\n                .attr(\"dy\", \".15em\")\n                .attr(\"transform\", \"rotate(-65)\");\n    \n        //create bars\n        const bar = chart.selectAll('group')\n                            .data(breakdown)\n                            .enter()\n        \n        //append rect elements for each item\n        bar.append('rect')\n            .style('fill', '#00d9ad')\n            .style('rx', '5')\n            .attr('x', (s) => s.scale)\n            .attr('y', (s) => yScale(s.y))\n            .attr('height', (s) => height - yScale(s.y))\n            .attr('width', xScale.bandwidth())\n        \n        //if text parameter has been set, add text labels to chart\n        if(addText){\n            //define width of current bar\n            let barWidth = xScale.bandwidth();\n\n            //build line chart\n            let line = _d3.line<GraphItem>()\n                            .x((d: GraphItem) => d.scale + margin + barWidth/2)\n                            .y((d: GraphItem) => yScale(d.y) + margin)\n                            .curve(_d3.curveMonotoneX)\n\n            //append line chart\n            svg.append(\"path\")\n                .datum(breakdown)\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", \"hsl(0, 0%, 17%)\")\n                .attr(\"stroke-width\", 1.5)\n                .attr(\"d\", line)\n\n            //append dots and add tooltip functionality \n            svg.selectAll('dot')\t\n                .data(breakdown)\t\t\n                .enter()\n                    .append('circle')\t\t\t\t\t\t\t\t\n                    .attr('r', 4)\t\n                    .attr('cx', (s) => s.scale + margin + barWidth/2)\n                    .attr('cy', (s) => yScale(s.y) + margin)\n\n            //append text elements\n            bar.append('text')\n                .attr('x', (s) => s.scale)\n                .attr('y', (s) => yScale(s.y) - 24)\n                .attr(\"dx\", barWidth/2)\n                .text((s) => `$${formatNumber((s.y).toFixed(2))}`)\n                .attr('font-size', '14px')\n                .attr('text-anchor', 'middle')\n                .attr('fill', 'hsl(0, 0%, 17%)')\n                .attr('font-weight', '800')        \n        }\n    }\n}\n\n//format numbers with commas in the thousands place, and round to 2 decimal pts\nexport const formatNumber = (num: any): string => {\n    let formatted: string = '0';\n\n    if(num) {\n        //round to 2 decimal pts\n        let newFloat = parseFloat(num)\n                            .toFixed(2)\n        //replace commas\n        formatted = newFloat\n                        .toString()\n                        .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n    } \n\n    return formatted;\n}","import { calculateTotals } from './utilities'\n\n/*  \n    ====================\n    AVAILABLE FUNTIONS\n    ====================\n    1. buildBreakdown - build category breakdown\n    2. buildSummary - build summary object\n    3. excludeCategories - exclude select categories from transactions array\n    4. cleanData - exclude select fields and categories from transactions array\n    5. buildDateRange - build array containing sorted transactions dates\n    6. cleanBreakdownData - clean up breakdown data to conform to bar chart\n    7. breakdownMonth - build monthly data for selected category over time\n    8. buildCategories - build object of all categories with active flag\n*/\n\n//build category breakdown\nexport const buildBreakdown = (transactions: Transaction[]): Breakdown => {\n    let categories: string[] = [];\n    let breakdown: Breakdown = {};\n\n    //build array of categories\n    transactions\n        .map(transaction => (!categories.includes(transaction['Category'])) && categories.push(transaction['Category']))\n\n    //break out spending into cateogries\n    categories.forEach(category => {\n        breakdown[category] = 0;\n        transactions\n            .filter(transaction => transaction['Category'] === category)\n            .forEach(transaction => {\n                (transaction['Transaction Type'] === 'credit') \n                    ? breakdown[category] += Number(transaction['Amount'])\n                    : breakdown[category] -= Number(transaction['Amount'])\n            })\n        \n        //if total value is negative ($$ spend), assign value else ($$ gained), remove category\n        let totalValue = Number(breakdown[category].toFixed(2));\n        (totalValue < 0) \n            ? breakdown[category] = totalValue \n            : delete breakdown[category];\n    })\n\n    return breakdown;\n} \n\n//build summary object\nexport const buildSummary = (noTransfers: Transaction[]): Summary => {\n    let summary: Summary = {};\n\n    //calculare total income\n    let totalIncome = calculateTotals(noTransfers, 'credit');\n    summary['totalIncome'] = totalIncome;\n\n    //calculate total amount speant\n    let totalSpent = calculateTotals(noTransfers, 'debit');\n    summary['totalSpent'] = totalSpent;\n\n    //calculare percent saved\n    summary['percentSaved'] = Math.round(((summary.totalIncome - summary.totalSpent) / summary.totalIncome) * 100);\n\n    //calculate total saved\n    summary['totalSaved'] = totalIncome - totalSpent;\n\n    return summary;\n}\n\n//exclude select categories from transactions array\nexport const excludeCategories = (transactions: Transaction[], categories: Category[]): Transaction[] => {\n    //build array of categories to exclude\n    let exclude: string[] = [];\n    categories.forEach(cat => cat?.name?.length && cat.active && exclude.push(cat.name))\n\n    //build cleaned array of transactions\n    let filtered: Transaction[] = [];\n    filtered = transactions.filter(transaction => !exclude.includes(transaction['Category']))\n    \n    return filtered;\n}\n\n//exclude select fields and categories from transactions array\nexport const cleanData = (transactions: Transaction[], categories: Category[]): Transaction[] => {\n    //build array of categories to exclude\n    let transactionList: Transaction[] = [];\n\n    //exclude selected categories from array of transactions\n    let filtered: Transaction[] = excludeCategories(transactions, categories);\n\n    filtered.forEach(transaction => {\n        //if transaction has data, and does not contain exclude category, add to filtered\n        if(Object.keys(transaction).length > 1){\n            //if each field exists, retun value, else return empty string \n            //transaction type must be either debit/credit\n            transactionList.push({\n                'Date': transaction['Date'] ? transaction['Date'] : '',\n                'Description': transaction['Description'] ? transaction['Description'] : '',\n                'Amount': transaction['Amount'] ? transaction['Amount'] : '',\n                'Transaction Type': transaction['Transaction Type'],\n                'Category': transaction['Category'] ? transaction['Category'] : '',\n            })\n        } \n    })\n    \n    return transactionList;\n}\n\n//build array containing sorted transactions dates\nexport const buildDateRange = (data: Transaction[]): string[] => {\n    //create sorted array containing all transaction dates\n    let dates: Date[] = [];\n    data.map(d => dates.push(new Date(d['Date'])))\n    dates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n    //pull out first and last date for range\n    let dateRange = [dates[0], dates[dates.length - 1]];\n\n    //clean up date formatting in MM/DD/YYYY format\n    let cleanedDates: string[] = [];\n    dateRange.forEach(date => {\n        //handle year\n        let year = date.getFullYear();\n\n        //handle month\n        let month = ((1 + date.getMonth()).toString());\n        month = (month.length > 1) \n                    ? month \n                    : '0' + month;\n\n        //handle day\n        let day = date.getDate().toString();\n        day = (day.length > 1) \n                    ? day \n                    : '0' + day;\n        \n        //push formatted date into new array\n        cleanedDates.push(`${month}/${day}/${year}`);\n    })\n\n    return cleanedDates;\n}\n\n//clean up breakdown data to conform to bar chart\nexport const cleanBreakdownData = (data: Breakdown): GraphItem[] => {\n    let cleanedBreakdown:GraphItem[] = [];\n    Object.keys(data).forEach(key => {\n        cleanedBreakdown.push({\n            x: key,\n            y: Math.abs(data[key]),\n            scale: 0\n        })\n    })\n    return cleanedBreakdown;\n}\n\n//build monthly data for selected category over time\nexport const breakdownMonth = (transactions: Transaction[], category: string): GraphItem[] => {\n    //create new object \n    let summary: Summary = {};\n    let graphData: GraphItem[] = [];\n    //loop through transactions\n    transactions.forEach(t => {\n        if(t['Category'] === category){\n            //split dates into MM/YYYY \n            let splitDate = t['Date'].split('/')\n            let condensedDate = `${splitDate[0]}/${splitDate[2]}`;\n            let amount = Number(t['Amount']);\n\n            //if no current value, create new value, if value, add to values\n            (!Object.keys(summary).includes(condensedDate))\n                ? summary[condensedDate] = amount\n                : summary[condensedDate] = Number(summary[condensedDate]) + amount\n        }\n    }) \n\n    //build array for x,y data\n    Object.keys(summary).forEach(key => {\n        graphData.push({ \n            x: key,\n            y: Number(summary[key].toFixed(2)),\n            scale: 0\n        })\n    })\n\n    //reverse data so it sort oldest to most recent\n    let data = graphData.reverse();\n\n    //return data array\n    return data;\n}\n\n\n//build object of all categories with active flag\nexport const buildCategories = (data: Transaction[]): Category[]  => {\n    //create category object\n    let categoryArray: string[] = [];\n    let categoryObj: Category[] = []\n\n    data.forEach(d => {\n      if(!categoryArray.includes(d['Category'])) {\n        var key = d['Category'];\n        categoryArray.push(key)\n        categoryObj.push({ \n            name: key,\n            active: false \n        })\n      }\n    })\n\n    return categoryObj;\n}","import React, { useEffect } from 'react';\nimport { buildGraph } from '../utils/utilities';\nimport { cleanBreakdownData } from '../utils/dataManupulation';\n\ninterface Props {\n    breakdown: Breakdown;\n}\n\nexport const BreakdownBarChart: React.FC<Props> = ({ breakdown }) => {\n    useEffect(() => {\n        if(!breakdown){\n            return;\n        } else {\n            //build breakdown object to match x/y format\n            let cleanedBreakdown: GraphItem[] = cleanBreakdownData(breakdown);\n            //build data visualization\n            buildGraph(cleanedBreakdown, 'spending-breakdown', false);\n        };\n    }, [breakdown]);\n   \n    return (\n        <div className='bar-chart'>\n            <svg className='spending-breakdown' preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1040 680\"></svg>\n        </div>\n    );\n};","import React from 'react';\nimport { formatNumber } from '../utils/utilities';\n\ninterface Props {\n    breakdown: Breakdown;\n    summary: Summary;\n}\n\nexport const Summary: React.FC<Props> = ({ breakdown, summary }) => {\n    return (\n        <div className=\"dashboard-summary\">\n            <div className=\"summary\">\n                {Object.keys(breakdown)\n                    .sort((a, b) => breakdown[a] - breakdown[b])\n                    .map((item, i) => (\n                        <div className=\"card\" key={i}>\n                            <h3>{item}</h3>\n                            <p className=\"red-warning\">${formatNumber(Math.abs(breakdown[item]))}</p>\n                            <p>{(((Math.abs(breakdown[item])) / summary.totalIncome) * 100).toFixed(2)}% of total income</p>\n                        </div>\n                ))}\n            </div>\n        </div>\n    );\n};","import React from 'react';\nimport { BreakdownBarChart } from './BreakdownBarChart';\nimport { Summary } from './Summary';\n\ninterface Props {\n    breakdown: Breakdown;\n    dates: string[];\n    summary: Summary;\n}\n\nexport const Dashboard: React.FC<Props> = ({ breakdown, dates, summary }) => {\n    return (\n        <div>\n            <h2>Spending Breakdown{dates?.length ? `: ${dates[0]} - ${dates[1]}` : ''}</h2>\n            {dates?.length\n               ? <div>\n                    <BreakdownBarChart breakdown={breakdown} />\n                    <Summary \n                        breakdown={breakdown} \n                        summary={summary}\n                    />\n                </div>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view spending breakdown.</p>\n            }\n        </div>\n    )\n};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faHome, \n    faChartBar, \n    faList, \n    faCalendarAlt \n} from '@fortawesome/free-solid-svg-icons';\n    \nexport const Sidebar: React.FC = () => {\n    return (\n        <aside className=\"sidebar\">\n            <ul>\n                <li className=\"sidebar-item\">\n                    <NavLink exact to='/spending-analysis/'>\n                        <FontAwesomeIcon icon={faHome} /> Home\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/breakdown'>\n                        <FontAwesomeIcon icon={faChartBar} /> Spending Breakdown\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/monthly'>\n                        <FontAwesomeIcon icon={faCalendarAlt} /> Monthly Data\n                    </NavLink>\n                </li>\n                <li className=\"sidebar-item\">\n                    <NavLink to='/spending-analysis/transactions'>\n                        <FontAwesomeIcon icon={faList} /> Transaction List\n                    </NavLink>\n                </li>\n            </ul>\n        </aside>\n    )\n};","import React from 'react';\n\nexport const Header: React.FC = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"custom-shape-divider\">\n                <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\" fill=\"#00d9ad\">\n                    <path d=\"M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\" opacity=\".25\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\" opacity=\".5\" className=\"shape-fill\"></path>\n                    <path d=\"M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\" className=\"shape-fill\"></path>\n                </svg>\n            </div>\n            \n            <h1>SpendAnalyzer</h1>\n        </div>\n    )\n};","import React from 'react';\nimport { formatNumber } from '../utils/utilities';\n\ninterface Props {\n    dates: string[];\n    summary: Summary;\n}\n\nexport const Overview: React.FC<Props> = ({ dates, summary }) => {\n    return (\n        <div className=\"home-summary\">\n            <h2>{dates?.length ? `${dates[0]} - ${dates[1]}` : ''}</h2>\n            <div className=\"spending-summary\">\n                <div className=\"card\">\n                    <h3>Total Income +</h3>\n                    <p className=\"green-success\">${formatNumber(summary.totalIncome)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Total Spent -</h3>\n                    <p className=\"red-warning\">${formatNumber(summary.totalSpent)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Total Saved</h3>\n                    <p className={formatNumber(summary.totalSaved).includes('-') ? 'red-warning' : 'green-success'}>${formatNumber(summary.totalSaved)}</p>\n                </div>\n                <div className=\"card\">\n                    <h3>Percent Saved</h3>\n                    <p className={(summary.percentSaved > 50) ? 'green-success' : 'red-warning'}>{summary.percentSaved}%</p>\n                </div>\n            </div>\n        </div>\n    )\n};","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faTimes, \n    faPlus, \n    faMinus \n} from '@fortawesome/free-solid-svg-icons';\n\ninterface Props {\n    transactions: Transaction[];\n    categories: Category[];\n    toggleCategory: (category: Category) => void;\n}\n\nexport const Categories: React.FC<Props> = ({ categories, toggleCategory }) => {\n    const [showDropdown, setShowDropdown] = useState(false);\n    const activeCat = categories.filter(cat => cat.active);\n\n    return (\n        <div className=\"category-container\">\n            <h2 \n                className=\"pointer\"\n                onClick={() => showDropdown ? setShowDropdown(false) : setShowDropdown(true)}\n            >\n                <span>Exclude Categories ({activeCat.length})</span>\n                { showDropdown \n                    ? <FontAwesomeIcon className=\"icon\" icon={faMinus} /> \n                    : <FontAwesomeIcon className=\"icon\" icon={faPlus} />\n                }\n            </h2>\n            { showDropdown \n                ? <div>\n                    <p>Select a category to exclude it from your list of transactions</p>\n                    <div className=\"category-exclusion\">\n                        {categories.map((cat, i) =>  (\n                            <div \n                                key={i} \n                                className={`category-option pointer ${cat?.active ? 'selected' : ''}`}\n                                onClick={() => toggleCategory(cat)}\n                            >\n                                <FontAwesomeIcon icon={faTimes} />\n                                <span className=\"category-label\">{cat.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                : <div className=\"category-exclusion\">\n                {activeCat.map((cat, i) =>  (\n                    <div \n                        key={i} \n                        className={`category-option pointer ${cat?.active ? 'selected' : ''}`}\n                        onClick={() => toggleCategory(cat)}\n                    >\n                        <FontAwesomeIcon icon={faTimes} />\n                        <span className=\"category-label\">{cat.name}</span>\n                    </div>\n                ))}\n            </div>\n            }\n        </div>\n    );\n};","import React from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { Overview } from './Overview';\nimport { Categories } from './Categories';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons';\n\ninterface Props {\n    onFileLoad: (transactions: Transaction[], fileInfo: FileInfo) => void;\n    toggleCategory: (category: Category) => void;\n    transactions: Transaction[];\n    dates: string[];\n    summary: Summary;\n    file: string;\n    error: boolean;\n    categories: Category[]\n}\n\nexport const Home: React.FC<Props> = ({ \n    onFileLoad, \n    transactions, \n    dates, \n    summary, \n    file, \n    error, \n    categories, \n    toggleCategory \n}) => {\n    return (\n        <div className=\"home\">\n            <h2>Welcome!</h2>\n            {!transactions?.length && <p className=\"error-message\">Please select a CSV file to upload.</p>}\n            \n            {error && <p className=\"error-message\">Something went wrong. Please try again.</p>}\n\n            <div className=\"csv-upload\">\n                <CSVReader\n                    parserOptions={{ header: true }}\n                    onFileLoaded={(data, fileInfo) => onFileLoad(data, fileInfo)}\n                />\n\n                <p>\n                    {file \n                        ? <span className=\"success-message\">  \n                            <FontAwesomeIcon \n                                icon={faCheckCircle} \n                                className=\"icon\"\n                            />\n                            Currently reading: <strong>{file}</strong></span> \n                        : <span>No file selected</span>\n                    }\n                </p>\n            </div>\n\n            {transactions?.length \n                ? <div>\n                    <Categories \n                        transactions={transactions}\n                        categories={categories}\n                        toggleCategory={toggleCategory}\n                    />\n                    <Overview \n                        dates={dates} \n                        summary={summary}\n                    />\n                </div>\n                : null\n            }\n        </div>\n    )\n}","import React from 'react';\n\ninterface Props {\n    transaction: Transaction;\n}\n\nexport const Transaction: React.FC<Props> = ({ transaction }) => {\n    return (\n        <tr>\n            {Object.keys(transaction).map((item, i) => (\n                <td key={i} className=\"transaction-field\">\n                    <p>{transaction[item]}</p>\n                </td>\n            ))}\n        </tr>\n    )\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { \n    faChevronLeft, \n    faChevronRight \n} from '@fortawesome/free-solid-svg-icons';\n\ninterface Props {\n    transactions: Transaction[];\n    totalPages: number;\n    perPageStart: number;\n    perPageEnd: number;\n    page: number;\n    nextPage: () => void;\n    prevPage: () => void;\n}\n\nexport const Toolbar: React.FC<Props> = ({ \n    totalPages, \n    perPageStart, \n    perPageEnd, \n    page,\n    transactions, \n    prevPage, \n    nextPage \n}) => {\n    //calculate total number of transactions\n    let total = transactions?.length ? transactions.length : 0;\n    \n    return (\n        <div className=\"transaction-toolbar\">\n            <p>\n                Showing \n                {(totalPages > 1) && \n                    ` ${perPageStart + 1} - ${\n                        (perPageEnd > total) \n                            ? total\n                            : perPageEnd} of`\n                }\n                {` ${total}`} transaction{total !== 1 ? 's' : ''}\n            </p>\n            {transactions?.length \n                ? <div className=\"pagination\">\n                    <button \n                        className=\"prev-btn btn\" \n                        onClick={() => prevPage()\n                    }>\n                        <FontAwesomeIcon \n                            icon={faChevronLeft} \n                            className=\"icon\"\n                        />\n                        Prev\n                    </button>\n\n                    <p>Page {page} of {totalPages}</p>\n\n                    <button \n                        className=\"next-btn btn\" \n                        onClick={() => nextPage()\n                    }>\n                        Next\n                        <FontAwesomeIcon \n                            icon={faChevronRight} \n                            className=\"icon\"\n                        />\n                    </button>\n                </div>\n                : null\n            }\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Transaction } from './Transaction'\nimport { Toolbar } from './Toolbar'\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n}\n\nexport const TransactionsList: React.FC<Props> = ({ transactions, dates }) => {\n    const [page, setPage] = useState(1);\n    const [perPageStart, setPerPageStart] = useState(0);\n    const [perPageEnd, setPerPageEnd] = useState(20);\n\n    //calculate number of total pages\n    const totalPages = Math.ceil(transactions.length / 20);\n\n    //paginate to the next page\n    const prevPage = (): void => {\n        if(page > 1){\n            let newPage = page - 1;\n            setPage(newPage);\n\n            let pageStart = perPageStart - 20;\n            let pageEnd = perPageStart;\n\n            setPerPageStart(pageStart)\n            setPerPageEnd(pageEnd)\n        }\n    }\n\n    //paginate to previous page\n    const nextPage = (): void => {\n        if(page < totalPages){\n            let newPage = page + 1;\n            setPage(newPage);\n\n            let pageStart = perPageStart + 20;\n            let pageEnd = pageStart + 20\n\n            setPerPageStart(pageStart)\n            setPerPageEnd(pageEnd)\n        }\n    }\n\n    useEffect(() => {\n        //run re-render on page change\n    }, [page])\n \n    return (\n        <div className=\"transactions-list\">\n            <h2>Transaction List{dates?.length ? `: ${dates[0]} - ${dates[1]}` : ''}</h2>\n            <Toolbar \n                transactions={transactions}\n                totalPages={totalPages}\n                perPageStart={perPageStart}\n                perPageEnd={perPageEnd}\n                nextPage={nextPage}\n                prevPage={prevPage}\n                page={page}\n            />\n            { transactions?.length\n                ? <table className=\"transactions-table\">\n                    <thead>\n                        <tr>\n                            {(transactions?.length > 0) && Object.keys(transactions[0]).map((item, i) => (\n                                <th key={i}>{item}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {transactions.map((transaction, i) => (\n                            (i > perPageStart && i <= perPageEnd) && \n                            <Transaction \n                                key={i} \n                                transaction={transaction} \n                            />\n                        ))}\n                    </tbody>\n                </table>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view your transactions list.</p>\n            }\n        </div>\n    )\n};","import React, { useState, useEffect } from 'react';\nimport { buildGraph } from '../utils/utilities';\nimport { breakdownMonth } from '../utils/dataManupulation';\n\ninterface Props {\n    transactions: Transaction[];\n    dates: string[];\n    breakdown: Breakdown;\n}\n\nexport const Monthly: React.FC<Props> = ({ transactions, dates, breakdown }) => {\n    //get array of all categories in transaction list\n    const categories: string[] = [];\n    Object.keys(breakdown).map(key => categories.push(key.toString()));\n   \n    //set initial category to populate dropdown & viz\n    const [activeCat, setActiveCat] = useState(categories[0]);\n\n    useEffect(() => {\n        if(!transactions){\n            return;\n        } else {\n            //if changes in activeCat or transactions, re-build visualization\n            const monthlyBreakdown = breakdownMonth(transactions, activeCat);\n            buildGraph(monthlyBreakdown, 'monthly-breakdown', true);\n        }\n    }, [transactions, activeCat]);\n\n    return (\n        <div className=\"monthly-chart\">\n            <h2>Monthly Data{dates?.length ? `: ${dates[0]} - ${dates[1]}` : ''}</h2>\n\n            {transactions?.length\n                ? <div> \n                    <div className=\"monthly-select\">\n                        <div className=\"select-container pointer\">\n                            <select onChange={e => {\n                                const target = e.target as HTMLSelectElement;\n                                const cat: any = target.value;\n                                setActiveCat(cat)\n                            }} \n                            value={activeCat}\n                            className=\"monthly-dropdown\">\n                                {categories.map(cat => (\n                                    <option key={cat} value={cat}>{cat}</option>\n                                ))}\n                            </select>\n                            <span className=\"focus\"></span>\n                        </div>\n                        <h3>{activeCat}</h3>\n                    </div>\n                    <div className=\"monthly-breakdown-container\">\n                        <svg className='monthly-breakdown' preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 1040 660\"></svg>\n                    </div>\n                </div>\n                : <p className=\"error-message\">There is no data available. Please upload a CSV to view monthly spending summary.</p>\n            }\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { Dashboard } from './components/Dashboard';\nimport { Sidebar } from './components/Sidebar';\nimport { Header } from './components/Header';\nimport { Home } from './components/Home';\nimport { TransactionsList } from './components/TransactionsList';\nimport { Monthly } from './components/Monthly';\nimport { \n  buildBreakdown, \n  buildCategories,\n  buildDateRange,\n  buildSummary,\n  cleanData,\n  excludeCategories\n} from './utils/dataManupulation';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './styles/App.css';\n\n//initial state variables\nconst initialTransactions: Transaction[] = [];\nconst emptyDates: string[] = [];\nconst emptyCategories: Category[] = [];\n\nexport const App: React.FC<{}> = () => {\n  const [initial, setInitial] = useState(initialTransactions);\n  const [transactions, setTransactions] = useState(initialTransactions);\n  const [breakdown, setBreakdown] = useState({});\n  const [summary, setSummary] = useState({});\n  const [dates, setDates] = useState(emptyDates);\n  const [file, setFile] = useState('');\n  const [error, setError] = useState(false);\n  const [categories, setCategories] = useState(emptyCategories);\n\n  //build data on file load\n  const onFileLoad = (data: Transaction[], fileInfo: FileInfo): void => {\n    if(data && fileInfo){\n      //set active file name\n      setFile(fileInfo.name)\n\n      //remove extraneous fields from transations object\n      const cleanedData = cleanData(data, categories)\n      setTransactions(cleanedData)\n      \n      //set initial category array - duplicated to preserve original list\n      setInitial(cleanedData)\n\n      //create category object\n      let categoryObj = buildCategories(cleanedData)\n      setCategories(categoryObj)\n\n      //build spending summary from transaction data\n      createSummary(cleanedData)\n    } else {\n      //set error status to true\n      setError(true)\n    }\n  };\n\n  //function for toggling active category\n  const toggleCategory = (category: Category) : void => {\n    let toggledCategories: Category[] = [];\n  \n    categories.forEach(cat => \n      (cat.name === category.name)\n        ? toggledCategories.push({\n          ...cat,\n          active: (cat.active) ? false : true\n        })\n        : toggledCategories.push(cat)\n    )\n    setCategories(toggledCategories)\n\n    //exclude categories from filtered data\n    const cleanedData = excludeCategories(initial, toggledCategories)\n    setTransactions(cleanedData)\n\n    //build spending summary from transaction data\n    createSummary(cleanedData)\n  };\n\n  //create spending summary (breakdown, date range, summary)\n  const createSummary = (transactions: Transaction[]): void => { \n      //set category breakdown\n      let newBreakdown = buildBreakdown(transactions)\n      setBreakdown(newBreakdown)\n\n      //build date range\n      let dateRange = buildDateRange(transactions)\n      setDates(dateRange);\n\n      //create summary object\n      let newSummary = buildSummary(transactions);\n      setSummary(newSummary)\n  };\n\n  return (\n    <Router>\n      <div className=\"main\">\n        <Header />\n\n        <div className=\"main-container\">\n          <Sidebar />\n\n          <main className=\"dashboard-container\">\n            <Switch>\n                <Route path='/spending-analysis/breakdown'>\n                  <Dashboard \n                    breakdown={breakdown} \n                    dates={dates}\n                    summary={summary}\n                  />\n                </Route>\n                <Route path='/spending-analysis/monthly'>\n                  <Monthly \n                    transactions={transactions} \n                    dates={dates}\n                    breakdown={breakdown} \n                  />\n                </Route>\n                <Route path='/spending-analysis/transactions'>\n                  <TransactionsList \n                    transactions={transactions} \n                    dates={dates}\n                  />\n                </Route>\n                <Route path=\"/\">\n                  <Home \n                    onFileLoad={onFileLoad} \n                    transactions={transactions} \n                    dates={dates}\n                    summary={summary}\n                    file={file}\n                    error={error}\n                    categories={categories}\n                    toggleCategory={toggleCategory}\n                  />\n                </Route>\n              </Switch>\n            </main>\n          </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}